[buildout]
index = http://packages.lizardsystem.nl
extends =
    http://packages.lizardsystem.nl/kgs/3.1.23/versions.cfg
    server.cfg
find-links =
unzip = true
socket-timeout = 2
prefer-final = true
versions = versions
extensions =
    mr.developer
    buildout-versions
parts =
    sysegg
    mkdir
    django
    omelette
    console_scripts
    pyflakes
    sphinx
    pydev
    ${buildout:serverparts}

develop = .
auto-checkout =
    lizard-security
    cassandralib
    dikedata-api
    rabbitmqlib
    tslib
    ddsc-site
    ddsc-core
    lizard-auth-client
    django-haystack
    ddsc-logging
eggs =
    ddsc-api


[versions]
# Specific pins. We inherit lots of pins from the KGS, so if you add a
# development egg, you really need to un-pin it here.
ddsc-api =
djangorestframework =
sitesetup = 0.14
lizard-wms = 1.17
raven = 3.1.4

# Reported by buildout-versions
requests = 1.1.0


[sources]
# Sources that mr.developer can check out and add as development egg.
# If one of them is absolutely necessary, add its name to the "auto-checkout"
# in [buildout].
# Example:
# lizard-ui = git git@github.com:lizardsystem/lizard-ui.git
ddsc-site = git git@github.com:ddsc/ddsc-site 
lizard-security = git git@github.com:lizardsystem/lizard-security.git branch=ddsc
dikedata-api = git git@github.com:ddsc/dikedata-api.git
ddsc-core = git git@github.com:ddsc/ddsc-core.git
cassandralib = git git@github.com:nens/cassandralib.git
rabbitmqlib = git git@github.com:nens/rabbitmqlib.git
tslib = git git@github.com:nens/tslib.git
django-rest-framework = git git@github.com:tomchristie/django-rest-framework.git
lizard-auth-client = git git@github.com:lizardsystem/lizard-auth-client.git
django-haystack = git git@github.com:toastdriven/django-haystack.git
ddsc-logging = git git@github.com:ddsc/ddsc-logging.git


[sysegg]
# Add eggs here that are best handled through OS-level packages.
recipe = osc.recipe.sysegg
force-sysegg = true
eggs =
    psycopg2
    matplotlib
    pyproj


[mkdir]
recipe = z3c.recipe.mkdir
paths =
    ${buildout:directory}/var/static
    ${buildout:directory}/var/media
    ${buildout:directory}/var/log
    ${buildout:directory}/var/sqlite
    ${buildout:directory}/var/solr
    ${buildout:directory}/var/solr/data
    ${buildout:directory}/var/solr/log
    ${buildout:directory}/var/solr/spellchecker


[serverconfig]
# Configuration for setting up gunicorn, supervisor etc.
# For the gunicorn port, check on the server in the other sites as
# there should be no overlap. And simply give the supervisor port one
# number higher.
gunicorn-port = 9000
supervisor-port = 9001
sitename = api.dijkdata.nl
workers = 3


[django]
# Sets up django for testing our application.
# See http://jacobian.org/writing/django-apps-with-buildout/
recipe = djangorecipe
wsgi = true
wsgilog = ${buildout:directory}/var/log/django.log
project = ddsc_api
projectegg = ddsc_api
settings = developmentsettings
test = ddsc_api
eggs = ddsc-api


[omelette]
# Creates a nice parts/omelette with our used eggs
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}


[console_scripts]
recipe = zc.recipe.egg
interpreter = python
eggs =
    ${buildout:eggs}
# Development tools
    createcoverage
    pep8
    zest.releaser
    sitesetup
    fabric


[pyflakes]
# Hairy way to install pyflakes: old-style distutils script.
recipe = zc.recipe.egg
scripts =
   pyflakes
eggs =
   pyflakes
entry-points = pyflakes=pkg_resources:run_script
arguments = 'pyflakes', 'pyflakes'


[sphinx]
recipe = collective.recipe.sphinxbuilder
source = ${buildout:directory}/doc/source
build = ${buildout:directory}/doc/build
eggs = ${buildout:eggs}


[pydev]
recipe = pb.recipes.pydev
eggs = ${buildout:eggs}
pydevproject_path = ${buildout:directory}/.pydevproject
extra_paths =
